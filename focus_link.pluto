-- Made by Lena (stand.dll). Why do I even add this?

local custom_types = {
    "Vehicle>Garage>Save Vehicle",
    "Self>Appearance>Outfit>Wardrobe>Save Outfit>Save Outfit",
    "Stand>Profiles>Create Profile",
    "Vehicle>Movement>Handling Editor>Presets>Save Preset",
    "Online>Rockstar ID Tools>Join Session By Name"
}

local linkOrder = {"forgor", "reinstall", "protn_vpn", "susd1", "doh", "preview", "hotkeys", "vpn"}

local links = {
    -- Commands
    forgor = {
        name = "Forgor ID",
        text = "!forgorid",
        des = "Useful if a User has forgotten their Account ID."
    },

    reinstall =  {
        name = "Reinstall Stand",
        text = "!regress",
        des = "Which will upload a batch file with eventually useful tools."
    },

    protn_vpn = {
        name = "Setup Proton VPN",
        text = "!vpn",
        des = "Will guide the user on how to download Proton VPN if they require assistance."
    },

    susd1 = {
        name = "Sus D1",
        text = "!susd1",
        des = "Suspension - Excessive Regeneration (D1)"
    },

    doh = {
        name = "Set DNS up V2",
        text = "!dnsdoh",
        des = "It will give instructions, on how to setup the doh.txt to allow Stand's traffic to be routed through 1.1.1.1. Will Modify their Meta State.txt file."
    },

    preview = {
        name = "Upload compatibility mode exe",
        text = "!previewfix",
        des = "This will upload a .exe that will set GTA V into compatibility mode to fix eventual issues on Preview Versions for Windows."
    },

    hotkeys = {
        name = "Setup Hotkeys",
        text = "!hotk",
        des = "Quick Guide - On how to setup Hotkeys in Stand."
    },

    mssucks = {
        name = "Fix Windoof",
        text = "!mssucks",
        des = "Which will upload a file that will restore some system files to fix a unique issue where the windows av settings are literally not available and blocked by your \"IT Administrator\". "
    },

    -- Links
    vpn = {
        name = "Cloudflare VPN",
        text = "[Cloudflare WARP](<https://one.one.one.one)",
        des = "Cloudflare WARP VPN."
    }
}

local function getFocusedCommand(): ?userdata
    return menu.get_current_menu_list():getFocusPhysical()
end

local tab_root = menu.ref_by_path("Self"):getParent()
local version_info = menu.get_version()
local root_name_ref = menu.ref_by_path("Stand>Settings>Appearance>Address Bar>Root Name")
local address_separator_ref = menu.ref_by_path("Stand>Settings>Appearance>Address Bar>Address Separator")

-- Get the path from a reference
local function getPathFromRef(ref, override_separator)
    local path = ""
    local separator = override_separator or address_separator_ref:getState():gsub(version_info.brand, ""):gsub("Online", "")
    local components = {}  -- Store components in reverse order

    while ref:isValid() and not ref:equals(tab_root) do
        local name = ref:equals(tab_root) and (root_name_ref.value ~= 0 and root_name_ref:getState():gsub("{}", version_info.version) or "") or ref.menu_name
        local hash = tonumber(name)
        if hash then
            name = lang.get_string(hash)
        end
        if #name > 0 then
            table.insert(components, name)
        end
        ref = ref:getParent()
    end

    -- Reverse the order of components when constructing the path
    for i = #components, 1, -1 do
        path = path .. components[i] .. separator
    end

    if path == "" then
        return nil
    end

    return path:sub(0, -(separator:len() + 1))
end

local function get_type()
    local ref = getFocusedCommand()
    local type = menu.get_type(ref)
    local output

    for custom_types as t do
        if menu.ref_by_path(t).menu_name == ref.menu_name then
            output = CUSTOM
        else
            output = type
        end
    end

    --print(output)
    return output
end

-- Get the command string from a reference
local function getCommandFromRef(def_value = false, allow_type = true)
    local ref = getFocusedCommand()
    local input = menu.get_command_names(ref)
    local firstInput = input[1]
    local output = ""

    if firstInput then
        local state, defaultstate = ref:getState(), ref:getDefaultState()
        output = firstInput

        if allow_type then
            output = firstInput .. switch get_type() do
                case CUSTOM -> " [name]"
                case COMMAND_LIST -> "" -- whar?
                case COMMAND_LIST_SEARCH -> " [clue]"
                case COMMAND_INPUT -> " [input]"
                case COMMAND_TOGGLE_NO_CORRELATION -> " [on/off]"
                case COMMAND_TOGGLE -> " [on/off]"
                case COMMAND_TOGGLE_CUSTOM -> " [on/off]"
                case COMMAND_SLIDER -> $" [{ref.min_value} to {ref.max_value}]"
                case COMMAND_SLIDER_FLOAT -> $" [{ref.min_value / 100} to {ref.max_value / 100}]"
                case COMMAND_LIST_SELECT -> " [Text]"
                case 511 -> $" [{ref.min_value} to {ref.max_value}]" -- setrank
                case 3 -> "" -- Weird Text select thing
                case 73 -> "" -- Remove Gun list??
                case COMMAND_FLAG_LIST_ACTION -> ""
                case COMMAND_ACTION -> " " .. state
                case COMMAND_LIST_COLOUR -> "" -- color list
                default -> " " .. firstInput .. (def_value and defaultstate or state)
            end
        else
            output = firstInput -- .. " " .. state
        end

        local otherInputs = {}
        for i = 2, #input do
            otherInputs[i - 1] = input[i]
        end
        return lang.get_localised(output), table.unpack(otherInputs)
    end
end

local function modifyFocusLink(cmdPath)
    local parent = getFocusedCommand():getParent()

    if parent ~= tab_root then
        for pid in players.list() do
            local n = players.get_name(pid)

            if cmdPath:find(n) or (cmdPath:startswith("Online>Player History") and cmdPath:match("[%[%]]")) then
                local from_root, until_cmd = string.partition(cmdPath, "]", false)
                from_root = from_root:sub(1, from_root:match(".*()>"))
                cmdPath = from_root .. "[Player]" .. until_cmd
            end
        end
    end

    modifiedPath = cmdPath

    return modifiedPath
end

local function copyToClipboardWithHelpText(focusLink, commandLink, helpText)
    local clipboardText

    if commandLink or helpText != "" then
        clipboardText = "- Focus Link: " .. focusLink
    else
        clipboardText = focusLink
    end

    if commandLink and commandLink ~= "" then
        clipboardText ..= "\n\n- Command Link: " .. commandLink
    end

    if helpText and helpText ~= "" then
        clipboardText ..= "\n\n- Help Text: " .. helpText
    end

    util.copy_to_clipboard(clipboardText, true)
end

-- Menu action to copy links
local support = menu.list(menu.ref_by_command_name("lenamisc"), "Support Tools", {"supporttools"}, "")
menu.attach_after(menu.ref_by_command_name("lenatp"), menu.detach(support))

menu.action(support, "Copy Link", {"copylinks"}, "Use with Hotkeys.", function()
    local focusLink, commandLink, helpText
    local ref = getFocusedCommand()
    local state = ref:getState()
    local command, otherCommands = getCommandFromRef()

    if ref then
        local encodedPath = plutoURL.encode(getPathFromRef(ref, ">"))
        local modifiedPath = modifyFocusLink(getPathFromRef(ref, ">"))

        if modifiedPath:startswith("Players") or modifiedPath:startswith("Online>Player History") then
            focusLink = modifiedPath:gsub(">", " > ")
        else
            focusLink = "[" .. modifiedPath:gsub(">", " > ") .. " ðŸ¡­](<https://stand.gg/focus#" .. encodedPath .. ">)"
        end

        helpText = lang.get_string(menu.get_help_text(ref))
    end

    if command then
        local urlCommand = plutoURL.encode(getCommandFromRef(false, false):gsub(state, ""))

        if modifiedPath:startswith("Players") then
            for players.list() as p do
                local n = players.get_name(p):lower()
                if command:find(n) then
                    commandLink = "U > " .. command:gsub(n, " [Player]") .. " > Enter"
                end
            end
        else
            commandLink = "[U > " .. command:gsub("%%20", " ") .. " > Enter ðŸ¡­](<https://stand.gg/commandbox#" .. urlCommand .. ">)"
            if otherCommands then
                commandLink   ..= "\n - Other variants: " .. otherCommands
            end
        end

        if commandLink then
            commandLink ..= ref:getDefaultState() != "" and "\n- Default State: " .. ref:getDefaultState() or ""
        end
    end

    copyToClipboardWithHelpText(focusLink, commandLink, helpText)
end)

menu.divider(support, "Links & Commands")
for linkOrder as key do
    local value = links[key]
    menu.action(support, value.name, {"sup"..key}, value.des, function()
        util.copy_to_clipboard(value.text, true)
    end)
end