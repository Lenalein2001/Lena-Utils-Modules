-- Made by Lena (stand.dll). Why do I even add this?

local custom_types = {
    "Vehicle>Garage>Save Vehicle",
    "Self>Appearance>Outfit>Wardrobe>Save Outfit>Save Outfit",
    "Stand>Profiles>Create Profile",
    "Vehicle>Movement>Handling Editor>Presets>Save Preset"
}

local linkOrder = {"forgor", "reinstall", "protn_vpn", "dns", "doh", "preview", "hotkeys", "vpn"}

local links = {
    -- Commands
    forgor = {
        name = "Forgor ID",
        text = "!forgorid",
        des = "Useful if a User has forgotten their Account ID."
    },

    reinstall =  {
        name = "Reinstall Stand",
        text = "!regress",
        des = "Which will upload a batch file with eventually useful tools."
    },

    protn_vpn = {
        name = "Setup Proton VPN",
        text = "!vpn",
        des = "Will provide guidance to the user on how to download Proton VPN if they require assistance."
    },

    dns = {
        name = "Set DNS up",
        text = "!dns",
        des = "If the user needs help configuring their DNS with 1.1.1.1, it will provide instructions. Will configure their DNS Setting. Needs to be done by the User."
    },

    doh = {
        name = "Set DNS up V2",
        text = "!dnsdoh",
        des = "It will give instructions, on how to setup the doh.txt to allow Stand's traffic to be routed through 1.1.1.1. Will Modify their Meta State.txt file."
    },

    preview = {
        name = "Upload compatibility mode exe",
        text = "!previewfix",
        des = "Which will upload an .exe that will set GTA V into compatibility mode to fix eventual issues on Preview Versions for Windows."
    },

    hotkeys = {
        name = "Setup Hotkeys",
        text = "!hotk",
        des = "Quick Guide - On how to setup Hotkeys in Stand"
    },
    -- Links
    vpn = {
        name = "Cloudflare VPN",
        text = "[Cloudflare WARP](https://1.1.1.1)",
        des = "Cloudflare WARP VPN."
    }
}

local function urlEncode(input)
    return input:gsub(">", "%%3E"):gsub("%s", "%%20")
end

local function getFocusedCommand()
    for menu.get_current_ui_list():getChildren() as cmd do

        if cmd:isFocused() then
            return cmd
        end

    end
end

local tab_root = menu.ref_by_path("Self"):getParent()
local version_info = menu.get_version()
local root_name_ref = menu.ref_by_path("Stand>Settings>Appearance>Address Bar>Root Name")
local address_separator_ref = menu.ref_by_path("Stand>Settings>Appearance>Address Bar>Address Separator")

-- Get the path from a reference
local function getPathFromRef(cmd, lang_code, override_separator, include_root_name)
    local path = ""
    local separator = override_separator or address_separator_ref:getState():gsub(version_info.brand, ""):gsub("Online", "")
    local components = {}  -- Store components in reverse order

    while cmd:isValid() and (include_root_name or not cmd:equals(tab_root)) do
        local name = cmd:equals(tab_root) and (root_name_ref.value ~= 0 and root_name_ref:getState():gsub("{}", version_info.version) or "") or cmd.menu_name
        local hash = tonumber(name)
        if hash then
            name = lang.get_string(hash, lang_code or lang.get_current())
        end
        if #name > 0 then
            table.insert(components, name)
        end
        cmd = cmd:getParent()
    end

    -- Reverse the order of components when constructing the path
    for i = #components, 1, -1 do
        path = path .. components[i] .. separator
    end

    if path == "" then
        return ""
    end

    return path:sub(0, -(separator:len() + 1))
end

local function get_type()
    local cmd = getFocusedCommand()
    local type = menu.get_type(cmd)
    local output

    for custom_types as t do
        if menu.ref_by_path(t).menu_name == cmd.menu_name then
            output = CUSTOM
        else
            output = type
        end
    end

    return output
end

-- Get the command string from a reference
local function getCommandFromRef(def_value: bool = false, allow_type: bool = true)
    local cmd = getFocusedCommand()

    if cmd then
        for menu.get_command_names(cmd) as input do
            local state, defaultstate = cmd:getState(), cmd:getDefaultState()

            local output = input

            if allow_type then
                switch get_type() do
                    case COMMAND_LIST_SEARCH:
                        output ..= " [clue]"
                        break
                    case COMMAND_INPUT:
                        output ..= " [input]"
                        break
                    case CUSTOM:
                        output ..= " [name]"
                        break
                    case COMMAND_SLIDER:
                        output ..= " (" .. cmd.min_value .. " to " .. cmd.max_value .. ")"
                        break
                    case COMMAND_SLIDER_FLOAT:
                        local cmd_prec, min_val, max_val = cmd.precision, cmd.min_value, cmd.max_value -- Thanks to @davus__ for this precision fix
                        local f_min = string.format("%." .. cmd_prec .. "f", min_val / (10 ^ cmd_prec))
                        local f_max = string.format("%." .. cmd_prec .. "f", max_val / (10 ^ cmd_prec))
                        output ..= " [" .. f_min .. " to " .. f_max .. "]"
                        break
                    case COMMAND_ACTION:
                        output ..= " " .. state
                        break
                    default:
                        output = " " .. (def_value and defaultstate or state)
                        break
                end
            else
                output = input .. " " .. state
            end

            if def_value then
                output = input .. " " .. defaultstate
            end

            return tostring(output)
        end
    end
end

local function getCommandDefault()
    local cmd = getFocusedCommand()

    if cmd then
        local state, default_state = cmd:getState(), cmd:getDefaultState()
        if state != default_state then
            return default_state
        end
    end
end

local function copyToClipboardWithHelpText(focusLink: ?string, commandLink: ?string, helpText: ?string)
    local clipboardText = "- Focus Link: " .. focusLink

    if commandLink and commandLink ~= "" then
        clipboardText ..= "\n\n- Command Link: " .. commandLink
    end

    if helpText and helpText ~= "" then
        clipboardText ..= "\n\n- Help Text: " .. helpText
    end

    util.copy_to_clipboard(clipboardText, true)
end

-- Menu action to copy links
local support = menu.list(menu.ref_by_command_name("lenamisc"), "Support Tools", {"supporttools"}, "")
menu.attach_after(menu.ref_by_command_name("lenatp"), menu.detach(support))

menu.action(support, "Copy Link", {"copylinks"}, "Use with Hotkeys.", function()
    local focusLink, commandLink, helpText
    local cmd = getFocusedCommand()
    local state = cmd:getState()

    if cmd then
        local encodedPath = urlEncode(getPathFromRef(cmd, "en", ">", false))
        focusLink = "[" .. getPathFromRef(cmd, "en", ">", false) .. " ðŸ¡­](<https://stand.gg/focus#" .. encodedPath .. ">)"
        helpText = lang.get_string(menu.get_help_text(cmd))
    end

    if focusLink then
        local command, defaultCommand = getCommandFromRef(), getCommandFromRef(true)

        if command then
            local encodedCommand = urlEncode(getCommandFromRef(false, false)):gsub(state, "")
            local formattedCommand = command:gsub("On", "[toggle]"):gsub("Off", "[toggle]")

            commandLink = "[U > " .. formattedCommand:gsub("%%20", " ") .. " > Enter ðŸ¡­](<https://stand.gg/commandbox#" .. encodedCommand:gsub(state, "") .. ">)"

            if defaultCommand then
                local encodedDefaultCommand = urlEncode(getCommandFromRef(true))
                commandLink ..= "\n - Default State: [U > " .. defaultCommand:gsub("%%20", " ") .. " > Enter ðŸ¡­](<https://stand.gg/commandbox#" .. encodedDefaultCommand .. ">)"
            end
        end

        copyToClipboardWithHelpText(focusLink, commandLink, helpText)
    else
        notify("You are not focusing any command. :/")
    end
end)

menu.divider(support, "Links & Commands")

for linkOrder as key do
    local value = links[key]
    menu.action(support, value.name, {"sup"..key}, value.des, function()
        util.copy_to_clipboard(value.text, true)
    end)
end